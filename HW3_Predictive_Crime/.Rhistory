year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext))+
scale_fill_manual(values=c("grey10","lightyellow"))
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext))+
scale_fill_manual(values=c("grey50","lightyellow"))
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext))+
scale_fill_manual(values=c("grey50","lightyellow"))
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext))+
scale_fill_manual(values=c("grey50","lightyellow"))+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext),color='grey90')+
scale_fill_manual(values=c("grey50","lightyellow"))+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext))+
scale_fill_manual(values=c("grey50","lightyellow"))+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext),linewidth=0.2)+
scale_fill_manual(values=c("grey50","lightyellow"))+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext),linewidth=0.1)+
scale_fill_manual(values=c("grey50","lightyellow"))+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
mapTheme()
reg.summary %>%
filter(str_detect(Regression, "Regression 1"))
st_centroid() %>%
st_join(tracts20) %>%
na.omit() %>%
st_drop_geometry() %>%
group_by(Regression, raceContext) %>%
summarize(mean.Error = mean(Error, na.rm = T)) %>%
spread(raceContext, mean.Error) %>%
kable(caption = "Mean Error by neighborhood racial context") %>%
kable_styling("striped", full_width = F)
reg.summary %>%
filter(str_detect(Regression, "Regression 1")) %>%
st_centroid() %>%
st_join(tracts20) %>%
na.omit() %>%
st_drop_geometry() %>%
group_by(Regression, raceContext) %>%
summarize(mean.Error = mean(Error, na.rm = T)) %>%
spread(raceContext, mean.Error) %>%
kable(caption = "Mean Error by neighborhood racial context") %>%
kable_styling("striped", full_width = F)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ml_breaks <- classIntervals(reg1.CV$Prediction,
n = 5, "fisher")
theft_risk_sf <-
reg1.CV %>%
mutate(label = "Risk Predictions",
Risk_Category =classInt::findCols(ml_breaks),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(thefts2022) %>% mutate(theftcount = 1), ., sum) %>%
mutate(theftcount = replace_na(theftcount, 0))) %>%
dplyr::select(label,Risk_Category, theftcount)
thefts2022<-
st_read("https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/4/query?outFields=*&where=1%3D1&f=geojson") %>%
st_transform('ESRI:103376') %>%
filter(OFFENSE == 'THEFT/OTHER')
theft_ppp <- as.ppp(st_coordinates(thefts2021), W = st_bbox(final_net))
theft.1000 <- spatstat.explore::density.ppp(theft_ppp, 1000)
theft_KDE_sum <- as.data.frame(theft.1000) %>%
st_as_sf(coords = c("x", "y"), crs = st_crs(final_net)) %>%
aggregate(., final_net, mean)
kde_breaks <- classIntervals(theft_KDE_sum$value,
n = 5, "quantile")
theft_KDE_sf <- theft_KDE_sum %>%
mutate(label = "Kernel Density",
Risk_Category = classInt::findCols(kde_breaks),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(thefts2022) %>% mutate(theftcount = 1), ., sum) %>%
mutate(theftcount = replace_na(theftcount, 0))) %>%
dplyr::select(label, Risk_Category, theftcount)
ml_breaks <- classIntervals(reg1.CV$Prediction,
n = 5, "quantile")
theft_risk_sf <-
reg1.CV %>%
mutate(label = "Risk Predictions",
Risk_Category =classInt::findCols(ml_breaks),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(thefts2022) %>% mutate(theftcount = 1), ., sum) %>%
mutate(theftcount = replace_na(theftcount, 0))) %>%
dplyr::select(label,Risk_Category, theftcount)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = thefts2022, size = .1, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample(thefts2022,3000), size = .1, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample_n(thefts2022,3000), size = .1, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample_n(thefts2022,1000), size = .1, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = theftcount / sum(theftcount)) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
theft_ppp <- as.ppp(st_coordinates(thefts2021), W = st_bbox(final_net))
theft.1000 <- spatstat.explore::density.ppp(theft_ppp, 1000)
theft_KDE_sum <- as.data.frame(theft.1000) %>%
st_as_sf(coords = c("x", "y"), crs = st_crs(final_net)) %>%
aggregate(., final_net, mean)
kde_breaks <- classIntervals(theft_KDE_sum$value,
n = 5, "fisher")
theft_KDE_sf <- theft_KDE_sum %>%
mutate(label = "Kernel Density",
Risk_Category = classInt::findCols(kde_breaks),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(thefts2022) %>% mutate(theftcount = 1), ., sum) %>%
mutate(theftcount = replace_na(theftcount, 0))) %>%
dplyr::select(label, Risk_Category, theftcount)
ml_breaks <- classIntervals(reg1.CV$Prediction,
n = 5, "fisher")
theft_risk_sf <-
reg1.CV %>%
mutate(label = "Risk Predictions",
Risk_Category =classInt::findCols(ml_breaks),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(thefts2022) %>% mutate(theftcount = 1), ., sum) %>%
mutate(theftcount = replace_na(theftcount, 0))) %>%
dplyr::select(label,Risk_Category, theftcount)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample_n(thefts2022,1000), size = .1, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample_n(thefts2022,1000), size = .01, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 burglaries") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
gather(Variable, Value, -label, -Risk_Category, -geometry) %>%
ggplot() +
geom_sf(aes(fill = Risk_Category), colour = NA) +
geom_sf(data = sample_n(thefts2022,1000), size = .01, colour = "grey50") +
facet_wrap(~label, ) +
scale_fill_viridis_d(option="rocket",direction=-1) +
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
labs(title="Comparison of Kernel Density and Risk Predictions",
subtitle="2021 theft risk predictions; 2022 thefts") +
mapTheme(title_size = 14)
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = theftcount / sum(theftcount)) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
View(theft_KDE_sf)
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = theftcount / sum(theftcount)) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model",labels = scales::label_percent()) +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = theftcount / sum(theftcount)) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model", labels = scales::label_percent()) +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = theftcount / sum(theftcount)) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = (theftcount / sum(theftcount))* 100) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of  Test Set Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = (theftcount / sum(theftcount))* 100) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Risk prediction vs. Kernel density, 2022 theft",
y = "% of 2022 Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = (theftcount / sum(theftcount))* 100) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Theft prediction vs. Kernel density, 2022 theft",
y = "% of 2022 Thefts Per Model (per model)",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = (theftcount / sum(theftcount))* 100) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Theft prediction vs. Kernel density, 2022 Theft Events",
y = "% of 2022 Thefts Events in Each Risk Category by Model",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
rbind(theft_KDE_sf, theft_risk_sf) %>%
st_drop_geometry() %>%
na.omit() %>%
gather(Variable, Value, -label, -Risk_Category) %>%
group_by(label, Risk_Category) %>%
summarize(theftcount = sum(Value)) %>%
ungroup() %>%
group_by(label) %>%
mutate(Pcnt_of_test_set_crimes = (theftcount / sum(theftcount))* 100) %>%
ggplot(aes(Risk_Category,Pcnt_of_test_set_crimes)) +
geom_bar(aes(fill=label), position="dodge", stat="identity") +
scale_fill_viridis(discrete = TRUE, name = "Model") +
labs(title = "Theft prediction vs. Kernel density, 2022 Theft Events",
y = "% of Thefts Events in Each Risk Category by Model",
x = "Risk Category") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
tracts20 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E"),
year = 2020, state='DC', geometry=T) %>%
st_transform('ESRI:103376')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority_White", "Majority_Non_White"))
ggplot()+
geom_sf(data=tracts20, aes(fill=raceContext),linewidth=0.1)+
scale_fill_manual(values=c("grey50","lightyellow"), name= 'Race')+
geom_sf(data=dc_water,fill='lightblue',color='transparent') +
geom_sf(data = dc_quadrents, fill='transparent',color='grey10')+
ggtitle("Census Tracts by Race Content")
mapTheme()
